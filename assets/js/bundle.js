"use strict";!function(t,s){s.DOCS=s.DOCS||{},t(function(){DOCS.menu.init()}),DOCS.menu={element:".docs-frame__menu",menuitem:".docs-frame__menu__item",viewer:".docs-frame__viewer",init:function(){var s=this;t(s.menuitem).each(function(){var i=t(this);t(this).children("a").filter("[href^=#]").length&&i.addClass("is-disabled"),i.hasClass("is-active")&&s.open(i)}),t(s.menuitem).on("click","> a",function(i){var e=t(i.delegateTarget);i.preventDefault(),s.open(e)})},open:function(s){var i=t(s);i.filter(".is-disabled").length||(this.close(i.siblings().filter(".is-active")),this.view(i),i.addClass("is-active"))},close:function(s){t(s).removeClass("is-active")},view:function(s){var i=t(s).children("a").attr("href");t(this.viewer).attr("src",i)}}}(window.jQuery,window),function(t,s){function i(){var t=document.createElement("fakeelement"),s={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in s)if(void 0!==t.style[i])return s[i];return!1}var e=s.UI||{};s.UI=e,t(document).ready(function(){}),t.fn.transitionEndAfter=function(s,e){var n=this,a=!1,o=i();return t(this).one(o,function(){a=!0,s()}),setTimeout(function(){a||t(n).trigger(o)},e),this},e.tab=function(){var s='[data-ui-tab="tab"]',i='[data-ui-tab="panel"]',e={handleTabClick:function(t){t=t[0]||t;this.open(t)},open:function(t){var s=function(t){for(var s=[],i=t.parentNode.firstChild;i;i=i.nextSibling)1===i.nodeType&&i!==t&&s.push(i);return s}((t=t[0]||t).parentElement),i=this._getTarget(t);if(!i.item.classList.contains("is-active")){i.item.classList.add("is-active"),i.panel&&i.panel.classList.add("is-active");for(var e in s)this.close(s[e].childNodes[0])}},close:function(t){var s=this._getTarget(t);s.item.classList.contains("is-active")&&s.item.classList.remove("is-active"),s.panel&&s.panel.classList.contains("is-active")&&s.panel.classList.remove("is-active")},_getTarget:function(t){var s={};return s.item=t.parentElement,s.panel=document.querySelector(i+"#"+t.getAttribute("aria-controls")),s}};return t(document).on("click.tab:open",s,function(t){t.preventDefault(),e.handleTabClick(this)}),e}(),e.modal=function(){var e={WRAPPER:".wrapper",MODAL:".modal",MODAL_WINDOW:".modal__window",MODAL_OPEN:'[data-ui-modal="open"]',MODAL_CLOSE:'[data-ui-modal="close"]'},n={IS_MODAL_OPEN:"modal-open",IS_OPENED:"is-opened",IS_OPENING:"is-opening",IS_CLOSED:"is-closed",IS_CLOSING:"is-closing",IS_CURRENT:"is-current",IS_ACTIVE:"is-active",IS_PREVIUS:"is-previus"},a={CLICK_OPEN:"click.modal:open",CLICK_CLOSE:"click.modal:close",OPENED:"modal:opened",CLOSED:"modal:closed"},o=function(t){this.element=t,this.scrolltop=null,this.transition=i()};o.prototype={open:function(i){var o=this,l=i||o.element,r=null;t(l).hasClass(n.IS_OPENED)||t(l).hasClass(n.IS_OPENING)||t(l).hasClass(n.IS_CLOSING)||(o.scrolltop=t(s).scrollTop(),t(document.body).hasClass(n.IS_MODAL_OPEN)||t(document.body).addClass(n.IS_MODAL_OPEN),document.body.appendChild(l),t(l)[0].offsetHeight,t(l).removeClass(n.IS_CLOSED),t(l).addClass(n.IS_OPENING),t(l).addClass(n.IS_ACTIVE),t(l).addClass(n.IS_CURRENT),t(l).removeClass(n.IS_PREVIUS),t(l).siblings(e.MODAL+"."+n.IS_ACTIVE).removeClass(n.IS_CURRENT),t(l).siblings(e.MODAL+"."+n.IS_ACTIVE).removeClass(n.IS_PREVIUS),t(l).siblings(e.MODAL+"."+n.IS_ACTIVE).last().addClass(n.IS_PREVIUS),o.transition&&t(l).transitionEndAfter(function(){t(l).removeClass(n.IS_OPENING),t(l).addClass(n.IS_OPENED),t(l).trigger(a.OPENED)},300),t(l).hasClass(n.IS_OPENED)?t(l).find(e.MODAL_WINDOW).scrollTop(t(l).attr("data-scrolltop")):t(l).attr("data-scrolltop",0),r=t(l).siblings(e.MODAL+"."+n.IS_PREVIUS)[0],t(r).length&&t(r).attr("data-scrolltop",t(r).find(e.MODAL_WINDOW).scrollTop()),t(l).off(a.CLICK_CLOSE).on(a.CLICK_CLOSE,e.MODAL_CLOSE,function(){o.close(t(l))}))},close:function(i){var o=i||this.element,l=null;!t(o).hasClass(n.IS_OPENED)||t(o).hasClass(n.IS_CLOSED)||t(o).hasClass(n.IS_OPENING)||t(o).hasClass(n.IS_CLOSING)||(t(o).addClass(n.IS_CLOSING),t(o).removeClass(n.IS_OPENED),t(o).removeClass(n.IS_ACTIVE),t(o).removeClass(n.IS_CURRENT),t(o).removeClass(n.IS_PREVIUS),t(o).siblings(e.MODAL+"."+n.IS_ACTIVE).last().addClass(n.IS_CURRENT),t(o).siblings(e.MODAL+"."+n.IS_ACTIVE).removeClass(n.IS_PREVIUS),t(o).siblings(e.MODAL+"."+n.IS_CURRENT).prevAll("."+n.IS_ACTIVE).first().addClass(n.IS_PREVIUS),this.transition&&t(o).transitionEndAfter(function(){t(o).removeClass(n.IS_CLOSING),t(o).addClass(n.IS_CLOSED),t(o).trigger(a.CLOSED),t(o).siblings(e.MODAL+"."+n.IS_OPENED).length||t(document.body).removeClass(n.IS_MODAL_OPEN)},300),t(o).attr("data-scrolltop",0),l=t(o).siblings(e.MODAL+"."+n.IS_CURRENT)[0],t(l).length?(t(l).attr("data-scrolltop",t(l).find(e.MODAL_WINDOW).scrollTop()),t(l).find(e.MODAL_WINDOW).scrollTop(t(l).attr("data-scrolltop"))):t(s).scrollTop(this.scrolltop))}},t.fn.modal=function(s){return this.each(function(){var i=t(this).data("UI.modal"),e="string"==typeof s&&s;i||(i=new o(this),t(this).data("UI.modal",i)),e&&i[e](this)})}}()}(window.jQuery,window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
