"use strict";!function(t,s){s.DOCS=s.DOCS||{},t(function(){DOCS.menu.init()}),DOCS.menu={element:".docs-frame__menu",menuitem:".docs-frame__menu__item",viewer:".docs-frame__viewer",init:function(){var s=this;t(s.menuitem).each(function(){var e=t(this);t(this).children("a").filter("[href^=#]").length&&e.addClass("is-disabled"),e.hasClass("is-active")&&s.open(e)}),t(s.menuitem).on("click","> a",function(e){var i=t(e.delegateTarget);e.preventDefault(),s.open(i)})},open:function(s){var e=t(s);e.filter(".is-disabled").length||(this.close(e.siblings().filter(".is-active")),this.view(e),e.addClass("is-active"))},close:function(s){t(s).removeClass("is-active")},view:function(s){var e=t(s).children("a").attr("href");t(this.viewer).attr("src",e)}}}(window.jQuery,window),function(t,s){function e(){var t=document.createElement("fakeelement"),s={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var e in s)if(void 0!==t.style[e])return s[e];return!1}var i=s.UI||{};s.UI=i,t(document).ready(function(){}),t.fn.transitionEndAfter=function(s,i){var n=this,a=!1,o=e();return t(this).one(o,function(){a=!0,s()}),setTimeout(function(){a||t(n).trigger(o)},i),this},i.tab=function(){var t='[data-ui-tab="tab"]',s='[data-ui-tab="panel"]',e={handleTabClick:function(t){t=t[0]||t;this.open(t)},open:function(t){var s=function(t){for(var s=[],e=t.parentNode.firstChild;e;e=e.nextSibling)1===e.nodeType&&e!==t&&s.push(e);return s}((t=t[0]||t).parentElement),e=this._getTarget(t);if(!e.item.classList.contains("is-active")){e.item.classList.add("is-active"),e.panel&&e.panel.classList.add("is-active");for(var i in s)this.close(s[i].children[0])}},close:function(t){var s=this._getTarget(t);s.item.classList.contains("is-active")&&s.item.classList.remove("is-active"),s.panel&&s.panel.classList.contains("is-active")&&s.panel.classList.remove("is-active")},_getTarget:function(t){var e={};return e.item=t.parentElement,e.panel=document.querySelector(s+"#"+t.getAttribute("aria-controls")),e}};return document.addEventListener("click",function(s){if(s.preventDefault(),s.target.closest(t)){var i=s.target.closest(t);i&&e.handleTabClick(i)}}),e}(),i.modal=function(){var i={WRAPPER:".wrapper",MODAL:".modal",MODAL_WINDOW:".modal__window",MODAL_OPEN:'[data-ui-modal="open"]',MODAL_CLOSE:'[data-ui-modal="close"]'},n={IS_MODAL_OPEN:"modal-open",IS_OPENED:"is-opened",IS_OPENING:"is-opening",IS_CLOSED:"is-closed",IS_CLOSING:"is-closing",IS_CURRENT:"is-current",IS_ACTIVE:"is-active",IS_PREVIUS:"is-previus"},a={CLICK_OPEN:"click.modal:open",CLICK_CLOSE:"click.modal:close",OPENED:"modal:opened",CLOSED:"modal:closed"},o=function(t){this.element=t,this.scrolltop=null,this.transition=e()};o.prototype={open:function(e){var o=this,l=e||o.element,r=null;t(l).hasClass(n.IS_OPENED)||t(l).hasClass(n.IS_OPENING)||t(l).hasClass(n.IS_CLOSING)||(o.scrolltop=t(s).scrollTop(),t(document.body).hasClass(n.IS_MODAL_OPEN)||t(document.body).addClass(n.IS_MODAL_OPEN),document.body.appendChild(l),t(l)[0].offsetHeight,t(l).removeClass(n.IS_CLOSED),t(l).addClass(n.IS_OPENING),t(l).addClass(n.IS_ACTIVE),t(l).addClass(n.IS_CURRENT),t(l).removeClass(n.IS_PREVIUS),t(l).siblings(i.MODAL+"."+n.IS_ACTIVE).removeClass(n.IS_CURRENT),t(l).siblings(i.MODAL+"."+n.IS_ACTIVE).removeClass(n.IS_PREVIUS),t(l).siblings(i.MODAL+"."+n.IS_ACTIVE).last().addClass(n.IS_PREVIUS),o.transition&&t(l).transitionEndAfter(function(){t(l).removeClass(n.IS_OPENING),t(l).addClass(n.IS_OPENED),t(l).trigger(a.OPENED)},300),t(l).hasClass(n.IS_OPENED)?t(l).find(i.MODAL_WINDOW).scrollTop(t(l).attr("data-scrolltop")):t(l).attr("data-scrolltop",0),r=t(l).siblings(i.MODAL+"."+n.IS_PREVIUS)[0],t(r).length&&t(r).attr("data-scrolltop",t(r).find(i.MODAL_WINDOW).scrollTop()),t(l).off(a.CLICK_CLOSE).on(a.CLICK_CLOSE,i.MODAL_CLOSE,function(){o.close(t(l))}))},close:function(e){var o=e||this.element,l=null;!t(o).hasClass(n.IS_OPENED)||t(o).hasClass(n.IS_CLOSED)||t(o).hasClass(n.IS_OPENING)||t(o).hasClass(n.IS_CLOSING)||(t(o).addClass(n.IS_CLOSING),t(o).removeClass(n.IS_OPENED),t(o).removeClass(n.IS_ACTIVE),t(o).removeClass(n.IS_CURRENT),t(o).removeClass(n.IS_PREVIUS),t(o).siblings(i.MODAL+"."+n.IS_ACTIVE).last().addClass(n.IS_CURRENT),t(o).siblings(i.MODAL+"."+n.IS_ACTIVE).removeClass(n.IS_PREVIUS),t(o).siblings(i.MODAL+"."+n.IS_CURRENT).prevAll("."+n.IS_ACTIVE).first().addClass(n.IS_PREVIUS),this.transition&&t(o).transitionEndAfter(function(){t(o).removeClass(n.IS_CLOSING),t(o).addClass(n.IS_CLOSED),t(o).trigger(a.CLOSED),t(o).siblings(i.MODAL+"."+n.IS_OPENED).length||t(document.body).removeClass(n.IS_MODAL_OPEN)},300),t(o).attr("data-scrolltop",0),l=t(o).siblings(i.MODAL+"."+n.IS_CURRENT)[0],t(l).length?(t(l).attr("data-scrolltop",t(l).find(i.MODAL_WINDOW).scrollTop()),t(l).find(i.MODAL_WINDOW).scrollTop(t(l).attr("data-scrolltop"))):t(s).scrollTop(this.scrolltop))}},t.fn.modal=function(s){return this.each(function(){var e=t(this).data("UI.modal"),i="string"==typeof s&&s;e||(e=new o(this),t(this).data("UI.modal",e)),i&&e[i](this)})}}()}(window.jQuery,window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
