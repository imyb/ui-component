"use strict";!function(s,t){t.DOCS=t.DOCS||{},s(function(){DOCS.menu.init()}),DOCS.menu={element:".docs-frame__menu",menuitem:".docs-frame__menu__item",viewer:".docs-frame__viewer",init:function(){var t=this;s(t.menuitem).each(function(){var e=s(this);s(this).children("a").filter("[href^=#]").length&&e.addClass("is-disabled"),e.hasClass("is-active")&&t.open(e)}),s(t.menuitem).on("click","> a",function(e){var i=s(e.delegateTarget);e.preventDefault(),t.open(i)})},open:function(t){var e=s(t);e.filter(".is-disabled").length||(this.close(e.siblings().filter(".is-active")),this.view(e),e.addClass("is-active"))},close:function(t){s(t).removeClass("is-active")},view:function(t){var e=s(t).children("a").attr("href");s(this.viewer).attr("src",e)}}}(window.jQuery,window),function(s,t){function e(){var s=document.createElement("fakeelement"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var e in t)if(void 0!==s.style[e])return t[e];return!1}var i=t.UI||{};t.UI=i,s(document).ready(function(){}),s.fn.transitionEndAfter=function(t,i){var a=this,n=!1,l=e();return s(this).one(l,function(){n=!0,t()}),setTimeout(function(){n||s(a).trigger(l)},i),this},i.tab=function(){var t={element:'[data-ui-tab="tab"]',panel:'[data-ui-tab="panel"]',open:function(s){var t=this._getTarget(s);t.item.hasClass("is-active")||(t.item.addClass("is-active"),t.panel.length&&t.panel.addClass("is-active"),this.close(t.item.siblings().filter(".is-active").children(this.element)))},close:function(s){var t=this._getTarget(s);t.item.hasClass("is-active")&&(t.item.removeClass("is-active"),t.panel.length&&t.panel.removeClass("is-active"))},_getTarget:function(t){var e={};return e.item=s(t).parent(),e.panel=s(this.panel).filter("#"+s(t).attr("aria-controls")),e}};return s(document).on("click",t.element,function(s){s.preventDefault(),t.open(this)}),t}(),i.modal=function(){var i={WRAPPER:".wrapper",MODAL:".modal",MODAL_WINDOW:".modal__window",MODAL_OPEN:'[data-ui-modal="open"]',MODAL_CLOSE:'[data-ui-modal="close"]'},a={IS_MODAL_OPEN:"modal-open",IS_OPENED:"is-opened",IS_OPENING:"is-opening",IS_CLOSED:"is-closed",IS_CLOSING:"is-closing",IS_CURRENT:"is-current",IS_ACTIVE:"is-active",IS_PREVIUS:"is-previus"},n={CLICK_OPEN:"click.modal:open",CLICK_CLOSE:"click.modal:close",OPENED:"modal:opened",CLOSED:"modal:closed"},l=function(s){this.element=s,this.scrolltop=null,this.transition=e()};l.prototype={open:function(e){var l=this,o=e||l.element,r=null;s(o).hasClass(a.IS_OPENED)||s(o).hasClass(a.IS_OPENING)||s(o).hasClass(a.IS_CLOSING)||(l.scrolltop=s(t).scrollTop(),s(document.body).hasClass(a.IS_MODAL_OPEN)||s(document.body).addClass(a.IS_MODAL_OPEN),document.body.appendChild(o),s(o)[0].offsetHeight,s(o).removeClass(a.IS_CLOSED),s(o).addClass(a.IS_OPENING),s(o).addClass(a.IS_ACTIVE),s(o).addClass(a.IS_CURRENT),s(o).removeClass(a.IS_PREVIUS),s(o).siblings(i.MODAL+"."+a.IS_ACTIVE).removeClass(a.IS_CURRENT),s(o).siblings(i.MODAL+"."+a.IS_ACTIVE).removeClass(a.IS_PREVIUS),s(o).siblings(i.MODAL+"."+a.IS_ACTIVE).last().addClass(a.IS_PREVIUS),l.transition&&s(o).transitionEndAfter(function(){s(o).removeClass(a.IS_OPENING),s(o).addClass(a.IS_OPENED),s(o).trigger(n.OPENED)},300),s(o).hasClass(a.IS_OPENED)?s(o).find(i.MODAL_WINDOW).scrollTop(s(o).attr("data-scrolltop")):s(o).attr("data-scrolltop",0),r=s(o).siblings(i.MODAL+"."+a.IS_PREVIUS)[0],s(r).length&&s(r).attr("data-scrolltop",s(r).find(i.MODAL_WINDOW).scrollTop()),s(o).off(n.CLICK_CLOSE).on(n.CLICK_CLOSE,i.MODAL_CLOSE,function(){l.close(s(o))}))},close:function(e){var l=e||this.element,o=null;!s(l).hasClass(a.IS_OPENED)||s(l).hasClass(a.IS_CLOSED)||s(l).hasClass(a.IS_OPENING)||s(l).hasClass(a.IS_CLOSING)||(s(l).addClass(a.IS_CLOSING),s(l).removeClass(a.IS_OPENED),s(l).removeClass(a.IS_ACTIVE),s(l).removeClass(a.IS_CURRENT),s(l).removeClass(a.IS_PREVIUS),s(l).siblings(i.MODAL+"."+a.IS_ACTIVE).last().addClass(a.IS_CURRENT),s(l).siblings(i.MODAL+"."+a.IS_ACTIVE).removeClass(a.IS_PREVIUS),s(l).siblings(i.MODAL+"."+a.IS_CURRENT).prevAll("."+a.IS_ACTIVE).first().addClass(a.IS_PREVIUS),this.transition&&s(l).transitionEndAfter(function(){s(l).removeClass(a.IS_CLOSING),s(l).addClass(a.IS_CLOSED),s(l).trigger(n.CLOSED),s(l).siblings(i.MODAL+"."+a.IS_OPENED).length||s(document.body).removeClass(a.IS_MODAL_OPEN)},300),s(l).attr("data-scrolltop",0),o=s(l).siblings(i.MODAL+"."+a.IS_CURRENT)[0],s(o).length?(s(o).attr("data-scrolltop",s(o).find(i.MODAL_WINDOW).scrollTop()),s(o).find(i.MODAL_WINDOW).scrollTop(s(o).attr("data-scrolltop"))):s(t).scrollTop(this.scrolltop))}},s.fn.modal=function(t){return this.each(function(){var e=s(this).data("UI.modal"),i="string"==typeof t&&t;e||(e=new l(this),s(this).data("UI.modal",e)),i&&e[i](this)})}}()}(window.jQuery,window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
